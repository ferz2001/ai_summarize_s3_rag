#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∂–∏–º–æ–∫ –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ö –≤ Qdrant.
"""

import argparse
import asyncio
import sys
from pathlib import Path

from langchain_mcp_adapters.client import MultiServerMCPClient
from langchain_openai import ChatOpenAI
from langgraph.prebuilt import create_react_agent

from core.config import config
from qdrant_manager import QdrantManager
from tools import summarize_audio, summarize_video, search_summaries


async def create_summary_with_agent(file_path: str):
    """–°–æ–∑–¥–∞–µ—Ç –≤—ã–∂–∏–º–∫—É —Å –ø–æ–º–æ—â—å—é MCP –∞–≥–µ–Ω—Ç–∞."""
    print("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É...")
    
    llm = ChatOpenAI(openai_api_key=config.OPENAI_API_KEY, model="gpt-4o-mini")
    
    client = MultiServerMCPClient(
        {
            "local_http_tools": {
                "url": "http://localhost:9000/mcp/",
                "transport": "streamable_http",
            }
        }
    )
    
    tools = await client.get_tools()
    print("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:", [tool.name for tool in tools])

    agent = create_react_agent(llm, tools)

    prompt = f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –∏–∑ —Ñ–∞–π–ª–∞ `{file_path}` –∏ —Å–æ—Ö—Ä–∞–Ω–∏ –µ—ë –≤ Qdrant."
    print(f"\n‚ñ∂Ô∏è  –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≥–µ–Ω—Ç—É: '{prompt}'")

    response = await agent.ainvoke({"messages": [("user", prompt)]})

    print("\n--- –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ ---")
    final_response = response["messages"][-1]
    if hasattr(final_response, "content"):
        print(final_response.content)
    print("--------------------")


def create_summary_direct(file_path: str):
    """–°–æ–∑–¥–∞–µ—Ç –≤—ã–∂–∏–º–∫—É –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ MCP –∞–≥–µ–Ω—Ç–∞."""
    file_path_obj = Path(file_path)
    
    if not file_path_obj.exists():
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    file_extension = file_path_obj.suffix.lower()
    
    try:
        if file_extension in ['.mp3', '.wav', '.ogg', '.flac', '.m4a']:
            print(f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª: {file_path}")
            summary = summarize_audio(file_path)
        elif file_extension in ['.mp4', '.avi', '.mov', '.mkv']:
            print(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ—Ñ–∞–π–ª: {file_path}")
            summary = summarize_video(file_path)
        else:
            print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
            return
        
        print(f"\n‚úÖ –í—ã–∂–∏–º–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Qdrant!")
        print(f"üìÑ –î–ª–∏–Ω–∞ –≤—ã–∂–∏–º–∫–∏: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")


def search_in_qdrant(query: str, limit: int = 5, min_score: float = 0.3):
    """–ò—â–µ—Ç –≤—ã–∂–∏–º–∫–∏ –≤ Qdrant."""
    print(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}' (–º–∏–Ω. —Å—Ö–æ–∂–µ—Å—Ç—å: {min_score})")
    results = search_summaries(query, limit, min_score)
    print(results)


def list_all_summaries():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤—ã–∂–∏–º–∫–∏."""
    try:
        qdrant_manager = QdrantManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        results = qdrant_manager.client.scroll(
            collection_name=qdrant_manager.collection_name,
            limit=100,
            with_payload=True
        )
        
        points = results[0]
        
        if not points:
            print("üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤—ã–∂–∏–º–æ–∫")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –ø–æ session_id –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤
        session_groups = {}
        
        for point in points:
            payload = point.payload
            session_id = payload.get('session_id', point.id)
            
            if session_id not in session_groups:
                session_groups[session_id] = {
                    'file_name': payload.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'file_type': payload.get('file_type', 'unknown'), 
                    'created_at': payload.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:19],
                    'summary_length': payload.get('summary_length', 0),
                    'chunks': []
                }
            
            session_groups[session_id]['chunks'].append({
                'id': point.id,
                'chunk_index': payload.get('chunk_index', 0),
                'is_chunk': payload.get('is_chunk', False)
            })
        
        print(f"üìö –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—ã–∂–∏–º–æ–∫: {len(session_groups)} —Ñ–∞–π–ª–æ–≤ ({len(points)} –∑–∞–ø–∏—Å–µ–π)\n")
        
        for i, (session_id, group) in enumerate(session_groups.items(), 1):
            chunks_count = len(group['chunks'])
            is_chunked = any(chunk['is_chunk'] for chunk in group['chunks'])
            
            print(f"{i}. üìÅ {group['file_name']} ({group['file_type']})")
            print(f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {group['created_at']}")
            print(f"   üìè –î–ª–∏–Ω–∞: {group['summary_length']} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if is_chunked:
                print(f"   üß© –ß–∞–Ω–∫–æ–≤: {chunks_count}")
            
            print(f"   üÜî Session ID: {session_id}")
            print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")


def main():
    parser = argparse.ArgumentParser(description='–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–∂–∏–º–æ–∫ –∏ —Ä–∞–±–æ—Ç–∞ —Å Qdrant')
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∂–∏–º–∫–∏
    create_parser = subparsers.add_parser('create', help='–°–æ–∑–¥–∞—Ç—å –≤—ã–∂–∏–º–∫—É –∏–∑ —Ñ–∞–π–ª–∞')
    create_parser.add_argument('file_path', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É')
    create_parser.add_argument('--agent', action='store_true', 
                             help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP –∞–≥–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_parser = subparsers.add_parser('search', help='–ü–æ–∏—Å–∫ –≤—ã–∂–∏–º–æ–∫')
    search_parser.add_argument('query', help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
    search_parser.add_argument('--limit', type=int, default=5, 
                             help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    search_parser.add_argument('--min-score', type=float, default=0.3,
                             help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ (0.0-1.0)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤—ã–∂–∏–º–æ–∫
    subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤—ã–∂–∏–º–∫–∏')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    if args.command == 'create':
        if args.agent:
            asyncio.run(create_summary_with_agent(args.file_path))
        else:
            create_summary_direct(args.file_path)
    
    elif args.command == 'search':
        search_in_qdrant(args.query, args.limit, args.min_score)
    
    elif args.command == 'list':
        list_all_summaries()


if __name__ == "__main__":
    main() 