import os
import uuid
import shutil
from pathlib import Path
from typing import Optional
from fastapi import UploadFile

from core.config import config


class FileService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏."""
    
    def __init__(self):
        self.uploads_dir = Path(config.UPLOADS_DIR)
        self.temp_dir = Path(config.TEMP_DIR)
        self.audio_dir = self.uploads_dir / "audio"
        self.video_dir = self.uploads_dir / "video"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self._ensure_directories()
    
    def _ensure_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        for directory in [self.uploads_dir, self.temp_dir, self.audio_dir, self.video_dir]:
            directory.mkdir(parents=True, exist_ok=True)
            print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞: {directory}")
    
    async def save_uploaded_file(
        self, 
        file: UploadFile, 
        file_type: str = "temp",
        preserve_extension: bool = True
    ) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
        
        Args:
            file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            file_type: –¢–∏–ø —Ñ–∞–π–ª–∞ (audio, video, temp)
            preserve_extension: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if file_type == "audio":
            target_dir = self.audio_dir
        elif file_type == "video":
            target_dir = self.video_dir
        else:
            target_dir = self.temp_dir
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_id = str(uuid.uuid4())
        
        if preserve_extension and file.filename:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            extension = Path(file.filename).suffix
            filename = f"{file_id}{extension}"
        else:
            filename = file_id
        
        file_path = target_dir / filename
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        try:
            content = await file.read()
            with open(file_path, "wb") as f:
                f.write(content)
            
            print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            return str(file_path)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            raise
    
    def copy_to_temp(self, source_path: str, filename: Optional[str] = None) -> str:
        """
        –ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
        
        Args:
            source_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UUID)
            
        Returns:
            –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        if not filename:
            source_ext = Path(source_path).suffix
            filename = f"{uuid.uuid4()}{source_ext}"
        
        temp_path = self.temp_dir / filename
        shutil.copy2(source_path, temp_path)
        
        print(f"üìã –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {temp_path}")
        return str(temp_path)
    
    def cleanup_file(self, file_path: str):
        """
        –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        """
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                print(f"üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    def get_file_info(self, file_path: str) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
        """
        path = Path(file_path)
        
        if not path.exists():
            return {"exists": False}
        
        stat = path.stat()
        
        return {
            "exists": True,
            "name": path.name,
            "size": stat.st_size,
            "created": stat.st_ctime,
            "modified": stat.st_mtime,
            "extension": path.suffix,
            "type": self._get_file_type_from_path(str(path))
        }
    
    def _get_file_type_from_path(self, file_path: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏."""
        path = Path(file_path)
        
        if self.audio_dir in path.parents:
            return "audio"
        elif self.video_dir in path.parents:
            return "video"
        elif self.temp_dir in path.parents:
            return "temp"
        else:
            return "unknown"
    
    def list_files(self, file_type: Optional[str] = None) -> list:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤.
        
        Args:
            file_type: –¢–∏–ø —Ñ–∞–π–ª–æ–≤ (audio, video, temp, None –¥–ª—è –≤—Å–µ—Ö)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
        """
        files = []
        
        if file_type == "audio" or file_type is None:
            files.extend([str(f) for f in self.audio_dir.glob("*") if f.is_file()])
        
        if file_type == "video" or file_type is None:
            files.extend([str(f) for f in self.video_dir.glob("*") if f.is_file()])
        
        if file_type == "temp" or file_type is None:
            files.extend([str(f) for f in self.temp_dir.glob("*") if f.is_file()])
        
        return sorted(files)
    
    def cleanup_temp_files(self, max_age_hours: int = 24):
        """
        –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
        
        Args:
            max_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Å–∞—Ö
        """
        import time
        
        current_time = time.time()
        max_age_seconds = max_age_hours * 3600
        
        deleted_count = 0
        
        for temp_file in self.temp_dir.glob("*"):
            if temp_file.is_file():
                file_age = current_time - temp_file.stat().st_mtime
                
                if file_age > max_age_seconds:
                    try:
                        temp_file.unlink()
                        deleted_count += 1
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {temp_file}: {e}")
        
        if deleted_count > 0:
            print(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
file_service = FileService() 