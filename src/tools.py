import os
import subprocess
import time
from pathlib import Path

import requests
from faster_whisper import WhisperModel
from core.config import config


def extract_audio(video_path: str, audio_path: str) -> None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–≤—É–∫–æ–≤—É—é –¥–æ—Ä–æ–∂–∫—É –≤ 16kHz –º–æ–Ω–æ WAV —Å –ø–æ–º–æ—â—å—é ffmpeg."""
    command = [
        "ffmpeg",
        "-i",
        video_path,
        "-vn",
        "-acodec",
        "pcm_s16le" "-ar",
        "16000",
        "-ac",
        "1",
        audio_path,
        "-y",
    ]
    subprocess.run(command, check=True)


def transcribe_audio(audio_path: str, language: str = "ru") -> str:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Whisper."""
    asr = WhisperModel(config.WHISPER_MODEL, device="cpu", compute_type="int8")
    segments, _ = asr.transcribe(audio_path, language=language)
    print(segments)
    return " ".join([segment.text for segment in segments])


def summarize_text(text: str, model: str = "deepseek-r1:8b") -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Ollama –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Å–∫–∞–∑."""
    prompt = (
        "–°–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, –Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–∂–∞—Ç—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏–∑–±–µ–≥–∞–π –ø–æ—Ç–µ—Ä–∏ –≤–∞–∂–Ω—ã—Ö —Å–º—ã—Å–ª–æ–≤. "
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç <think>. "
        "–í—ã–¥–∞–π —Å–≤—è–∑–Ω—ã–π, –ª–æ–≥–∏—á–Ω—ã–π –∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:"
        f"{text}\n\n"
    )
    resp = requests.post(
        "http://localhost:11434/api/chat",
        json={
            "model": model,
            "messages": [{"role": "user", "content": prompt}],
            "stream": False,
        },
        timeout=600,
    )
    resp.raise_for_status()
    print(resp.json())
    return resp.json()["message"]["content"]


def summarize_audio(audio_path: str, language: str = "ru") -> str:
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ—Ç –≤—ã–∂–∏–º–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    Args:
        audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É.
        language: –Ø–∑—ã–∫ –∞—É–¥–∏–æ.
    Returns:
        –í—ã–∂–∏–º–∫–∞ –∏–∑ –∞—É–¥–∏–æ.
    """
    print("üó£Ô∏è  –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é‚Ä¶")
    transcript = transcribe_audio(audio_path, language=language)
    print("\nüîä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–æ–±—Ä–µ–∑–∞–Ω–æ):")
    print(transcript[:300] + ("‚Ä¶" if len(transcript) > 300 else ""))

    print("\nüìù –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –≤—ã–∂–∏–º–∫—É —É Ollama‚Ä¶")
    summary = summarize_text(transcript, model=config.OLLAMA_MODEL)
    return summary


def summarize_video(video_path: str, language: str = "ru") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤—ã–∂–∏–º–∫—É –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.
    Args:
        video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É.
        language: –Ø–∑—ã–∫ –∞—É–¥–∏–æ –≤ –≤–∏–¥–µ–æ.
    Returns:
        –í—ã–∂–∏–º–∫–∞ –∏–∑ –≤–∏–¥–µ–æ.
    """
    start_time = time.time()
    if not Path(video_path).exists():
        raise FileNotFoundError(f"–§–∞–π–ª {video_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    with Path(config.TMP_AUDIO) as tmp_audio_path:
        try:
            print("üé¨ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ‚Ä¶")
            extract_audio(video_path, str(tmp_audio_path))

            summary = summarize_audio(str(tmp_audio_path), language=language)

            print("\nüìå –ò—Ç–æ–≥–æ–≤—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑:")
            print(summary)

            elapsed = time.time() - start_time
            print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
            return summary
        finally:
            if tmp_audio_path.exists():
                os.remove(tmp_audio_path)
